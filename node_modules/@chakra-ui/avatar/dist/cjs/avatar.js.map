{"version":3,"sources":["../../src/avatar.tsx"],"names":["AvatarBadge","props","ref","styles","badgeStyles","position","display","alignItems","justifyContent","insetEnd","bottom","badge","className","__DEV__","displayName","initials","name","split","firstName","lastName","charAt","AvatarName","getInitials","rest","label","DefaultIcon","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","src","showBorder","borderRadius","onError","icon","iconLabel","loading","children","borderColor","ignoreFallback","avatarStyles","borderWidth","undefined","container","AvatarImage","status","hasLoaded","showFallback","React","cloneElement","role","width","height","objectFit"],"mappings":"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","sourcesContent":["import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    insetEnd: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {\n  iconLabel?: string\n}\n\nconst AvatarImage: React.FC<AvatarImageProps> = (props) => {\n  const {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <DefaultIcon />,\n    ignoreFallback,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n"],"file":"avatar.js"}