{"version":3,"sources":["../../src/drawer.tsx"],"names":["createContext","chakra","forwardRef","useStyles","useTheme","Slide","cx","__DEV__","React","Modal","ModalFocusScope","useModalContext","DrawerContextProvider","useDrawerContext","placementMap","start","ltr","rtl","end","getDrawerPlacement","placement","dir","Drawer","props","isOpen","onClose","placementProp","children","rest","theme","drawerStyleConfig","components","direction","StyledSlide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","displayName","ModalBody","DrawerBody","ModalCloseButton","DrawerCloseButton","ModalFooter","DrawerFooter","ModalHeader","DrawerHeader","ModalOverlay","DrawerOverlay"],"mappings":"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","sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { Slide, SlideOptions } from \"@chakra-ui/transition\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Modal, ModalFocusScope, ModalProps, useModalContext } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(placement: DrawerPlacement, dir: \"ltr\" | \"rtl\") {\n  if (!placement) return\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    Omit<ModalProps, \"scrollBehavior\" | \"motionPreset\" | \"isCentered\"> {}\n\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nconst StyledSlide = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const { className, children, ...rest } = props\n\n    const {\n      getDialogProps,\n      getDialogContainerProps,\n      isOpen,\n    } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <chakra.div\n        {...containerProps}\n        className=\"chakra-modal__content-container\"\n        __css={dialogContainerStyles}\n      >\n        <ModalFocusScope>\n          <StyledSlide\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </StyledSlide>\n        </ModalFocusScope>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\"\n}\n\nexport {\n  ModalBody as DrawerBody,\n  ModalCloseButton as DrawerCloseButton,\n  ModalFooter as DrawerFooter,\n  ModalHeader as DrawerHeader,\n  ModalOverlay as DrawerOverlay,\n} from \"./modal\"\n"],"file":"drawer.js"}