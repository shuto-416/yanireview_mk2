{"ast":null,"code":"import { decodeEntity } from 'parse-entities/decode-entity.js';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  } // Reference.\n\n\n  const head = $2.charCodeAt(0);\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n\n  return decodeEntity($2) || $0;\n}","map":{"version":3,"sources":["/Users/hamaguchishuto/Desktop/Web/yanireview_mk2/node_modules/micromark-util-decode-string/index.js"],"names":["decodeEntity","decodeNumericCharacterReference","characterEscapeOrReference","decodeString","value","replace","decode","$0","$1","$2","head","charCodeAt","hex","slice"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,iCAA3B;AACA,SAAQC,+BAAR,QAA8C,mDAA9C;AACA,MAAMC,0BAA0B,GAC9B,mEADF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAClC,SAAOA,KAAK,CAACC,OAAN,CAAcH,0BAAd,EAA0CI,MAA1C,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,MAAID,EAAJ,EAAQ;AACN;AACA,WAAOA,EAAP;AACD,GAJyB,CAIxB;;;AAEF,QAAME,IAAI,GAAGD,EAAE,CAACE,UAAH,CAAc,CAAd,CAAb;;AAEA,MAAID,IAAI,KAAK,EAAb,EAAiB;AACf,UAAMA,IAAI,GAAGD,EAAE,CAACE,UAAH,CAAc,CAAd,CAAb;AACA,UAAMC,GAAG,GAAGF,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAArC;AACA,WAAOT,+BAA+B,CAACQ,EAAE,CAACI,KAAH,CAASD,GAAG,GAAG,CAAH,GAAO,CAAnB,CAAD,EAAwBA,GAAG,GAAG,EAAH,GAAQ,EAAnC,CAAtC;AACD;;AAED,SAAOZ,YAAY,CAACS,EAAD,CAAZ,IAAoBF,EAA3B;AACD","sourcesContent":["import {decodeEntity} from 'parse-entities/decode-entity.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeEntity($2) || $0\n}\n"]},"metadata":{},"sourceType":"module"}